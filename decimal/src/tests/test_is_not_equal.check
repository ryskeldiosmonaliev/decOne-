#include "../s21_decimal.h"

// Тест на проверку неравенства чисел с разными знаками
#test s21_is_not_equal_1
    s21_decimal d1 = {{0, 0, 0, 0x80030000}};  // Отрицательное число с экспонентой 3
    s21_decimal d2 = {{0, 0, 0, 0x00030000}};  // Положительное число с экспонентой 3
    ck_assert(s21_is_not_equal(d1, d2) == TRUE);  // Числа должны быть не равны

// Тест на проверку неравенства чисел с одинаковыми значениями и разными знаками
#test s21_is_not_equal_2
    s21_decimal d1 = {{12345, 0, 0, 0x00030000}};  // Положительное число 12345 с экспонентой 3
    s21_decimal d2 = {{12345, 0, 0, 0x80030000}};  // Отрицательное число 12345 с экспонентой 3
    ck_assert(s21_is_not_equal(d1, d2) == TRUE);  // Числа должны быть не равны

// Тест на проверку равенства чисел с одинаковыми значениями и одинаковыми знаками
#test s21_is_not_equal_3
    s21_decimal d1 = {{0, 0, 0, 0x80030000}};  // Отрицательное число с экспонентой 3
    s21_decimal d2 = {{0, 0, 0, 0x80030000}};  // Отрицательное число с экспонентой 3
    ck_assert(s21_is_not_equal(d1, d2) == FALSE);  // Числа должны быть равны

// Тест на проверку неравенства чисел с разными значениями и одинаковыми знаками
#test s21_is_not_equal_4
    s21_decimal d1 = {{12345, 0, 0, 0x00030000}};  // Положительное число 12345 с экспонентой 3
    s21_decimal d2 = {{54321, 0, 0, 0x00030000}};  // Положительное число 54321 с экспонентой 3
    ck_assert(s21_is_not_equal(d1, d2) == TRUE);  // Числа должны быть не равны

// Тест на проверку равенства чисел с одинаковыми значениями и одинаковыми знаками
#test s21_is_not_equal_5
    s21_decimal d1 = {{12345, 0, 0, 0x80030000}};  // Отрицательное число 12345 с экспонентой 3
    s21_decimal d2 = {{12345, 0, 0, 0x80030000}};  // Отрицательное число 12345 с экспонентой 3
    ck_assert(s21_is_not_equal(d1, d2) == FALSE);  // Числа должны быть равны

printf("TEST s21_is_not_equal:\n");