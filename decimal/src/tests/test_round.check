#include "../s21_decimal.h"

#test s21_round_1
    s21_decimal value = {{1, 0, 0, 0}};
    s21_decimal result = {{0, 0, 0, 0}};
    s21_set_exponent(&value, 1);
    // value = 0.1
    int code = s21_round(value, &result);
    ck_assert(s21_is_equal(result, (s21_decimal) {{0,0,0,0}}));
    ck_assert (code == OK);

#test s21_round_2
    s21_decimal value = {{5, 0, 0, 0}};
    s21_decimal result = {{0, 0, 0, 0}};
    s21_set_exponent(&value, 1);
    // value = 0.5
    int code = s21_round(value, &result);
    ck_assert(s21_is_equal(result, (s21_decimal) {{1,0,0,0}}));
    ck_assert (code == OK);

#test s21_round_3
    s21_decimal value = {{5, 0, 0, 0}};
    s21_decimal result = {{0, 0, 0, 0}};
    s21_set_exponent(&value, 1);
    s21_set_bit(&value, SIGN);
    // value = -0.5
    int code = s21_round(value, &result);
    ck_assert(s21_is_equal(result, (s21_decimal) {{1,0,0, powers_of_two[31]}}));
    ck_assert (code == OK);


#test s21_round_4
    s21_decimal value = {{1, 1, 1, 0}};
    s21_decimal result = {{0, 0, 0, 0}};
    s21_set_exponent(&value, 10);
    s21_set_bit(&value, SIGN);
    // value = -1844674407.8004518913
    int code = s21_round(value, &result);
    ck_assert(s21_is_equal(result, (s21_decimal) {{1844674408, 0, 0, powers_of_two[31]}}));
    ck_assert (code == OK);
    printf("TEST s21_round:\n");